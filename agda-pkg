#!/bin/bash

usage(){
cat << EOF
Walk-through (without changing the configuration):
# One time setup
$ mkdir ~/.agda-pkg
$ cd ~/.agda-pkg
$ mkdir github patchtag
$ git clone https://github.com/agda/agda-stdlib github/agda-stdlib

# Example on how to build crypto-agda
$ mkdir github/crypto-agda
$ cd github/crypto-agda
$ git clone https://github.com/crypto-agda/agda-nplib
$ git clone https://github.com/crypto-agda/explore
$ git clone https://github.com/crypto-agda/crypto-agda
$ cd crypto-agda
$ agda-pkg -i. -pagda/agda-stdlib -pcrypto-agda/agda-nplib -pcrypto-agda/explore crypto-agda.agda

# Or using a configuration file:
$ echo 'incl=(.)' > agda-pkg.conf
$ echo 'pkgs=(agda/agda-stdlib crypto-agda/agda-nplib crypto-agda/explore)' >> # agda-pkg.conf
$ agda-pkg -cagda-pkg.conf crypto-agda.agda

This will pick the right include directives for you (-i<dir>)
EOF
exit 0
}

set -e

# $XDG_DATA_HOME ?
AGDA_PKG_ROOT="$HOME/.agda-pkg"

# You might want to tweak those to reflect your own directory organisation
AGDA_PKG_GITHUB_ROOT="$AGDA_PKG_ROOT/github"
AGDA_PKG_BITBUCKET_ROOT="$AGDA_PKG_ROOT/bitbucket"
AGDA_PKG_DARCSHUB_ROOT="$AGDA_PKG_ROOT/darcshub"

AGDA_PKG_GITHUB_URL=https://github.com
AGDA_PKG_DARCSHUB_URL=http://hub.darcs.net
AGDA_PKG_BITBUCKET_URL=https://bitbucket.org

AGDA_PKG_BIN="${AGDA_PKG_BIN:-agda}"

# You can override those config variables through a simple script
# to be sourced.
for conf in "$HOME"/.agda-pkg/config \
            "$XDG_CONFIG_HOME"/agda-pkg/config \
            /etc/agda-pkg/config; do
  if [ -e "$conf" ]; then
    . "$conf"
    break
  fi
done

# TODO: Deal with customization specifically for those
AGDA_PKG_SUBDIRS=(lib src .)
AGDA_PKG_SUBROOTS=("$AGDA_PKG_GITHUB_ROOT" "$AGDA_PKG_BITBUCKET_ROOT" "$AGDA_PKG_DARCSHUB_ROOT")
AGDA_PKG_MAINFILES=(Everything)

getpkg(){
  local root="$1"
  local pkg="$2"
  case "$pkg" in
    (darcshub/*)
      pkg="${pkg#darcshub/}"
      darcs get "$AGDA_PKG_BITBUCKET_ROOT/$pkg" "$root/$pkg" ;;
    (bitbucket/*)
      pkg="${pkg#bitbucket/}"
      hg  clone "$AGDA_PKG_BITBUCKET_URL/$pkg" "$root/$pkg" ||
      git clone "$AGDA_PKG_BITBUCKET_URL/$pkg" "$root/$pkg" ;;
    (github/*)
      pkg="${pkg#github/}"
      git clone "$AGDA_PKG_GITHUB_URL/$pkg" "$root/$pkg" ;;
    (*/*/*)
      echo "Unsupported package name \`$pkg'" >>/dev/stderr
      exit 1 ;;
    (*/*)
      # The default is github
      git clone "$AGDA_PKG_GITHUB_URL/$pkg" "$root/$pkg" ;;
    (*)
      echo "Unsupported package name \`$pkg'" >>/dev/stderr
      exit 1 ;;
  esac
}

pkgdir(){
  local pkg="$1"
  local fs=()
  for root in "${AGDA_PKG_SUBROOTS[@]}"; do
    local d="$root/$pkg"
    if [ ! -d "$d" ]; then
      getpkg "$root" "$pkg"
    fi
    for bpkg in "$(basename "$pkg")" "${AGDA_PKG_MAINFILES[@]}"; do
      local f="$d/$bpkg.agda"
      local fs=("${fs[@]}" "$f")
      if [ -e "$f" ]; then
        # TODO: read the subdir from special syntax in $f

        # Default heuristic
        for subdir in "${AGDA_PKG_SUBDIRS[@]}"; do
          if [ -e "$d/$subdir" ]; then
            echo "$d/$subdir"
            return 0
          fi
        done
      fi
    done
  done

  echo "Could not find the package \`$pkg'. None of the following files exist:" >>/dev/stderr
  for f in "${fs[@]}"; do
    echo "  $f" >>/dev/stderr
  done
  exit 1
}

packages(){
  _pkgs=("${_pkgs[@]}" "$@")
}

package(){
  # check arity
  packages "$1"
}

includedir(){
  _incl=("${_incl[@]}" "$@")
}

_args=("$AGDA_PKG_BIN")
_pkgs=()
_incl=()
_mode=run

loadconfig(){
  unset pkgs
  unset args
  unset incl
  . "$1"
  _pkgs=("${_pkgs[@]}" "${pkgs[@]}")
  _args=("${_args[@]}" "${args[@]}")
  includedir "${incl[@]}"
}

# Let's parse -p<pkg> and --pkg=<pkg> flags
for arg; do
  case "$arg" in
    (-c*)               loadconfig "${arg#-c}" ;;
    (--config=*)        loadconfig "${arg#--config=}" ;;
    (-p*)               package "${arg#-p}" ;;
    (--pkg=*)           package "${arg#--pkg=}" ;;
    (-i*)               includedir "${arg#-i}" ;;
    (--include-path=*)  includedir "${arg#--include-path=}" ;;
    (--include-dirs)    _mode=include-dirs ;;
    (-n|--dry-run)      _mode=dry ;;
    (-?|-h|--help)      usage ;;
    (*)                 _args=("${_args[@]}" "$arg") ;;
  esac
done

# Debugging
#echo "args: ${_args[@]}" >>/dev/stderr
#echo "pkgs: ${_pkgs[@]}" >>/dev/stderr
#echo "incl: ${_incl[@]}" >>/dev/stderr

for pkg in "${_pkgs[@]}"; do
  includedir "$(pkgdir "$pkg")"
done

for dir in "${_incl[@]}"; do
  _args=("${_args[@]}" -i"$dir")
done

case "$_mode" in
  (dry)
    echo "${_args[@]}"
    echo 'dry run, nothing is run' >>/dev/stderr;;
  (run)
    echo "${_args[@]}" >>/dev/stderr
    exec "${_args[@]}";;
  (include-dirs)
    echo "${_incl[@]}";;
esac

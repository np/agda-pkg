#!/bin/bash

usage(){
cat << EOF
Walk-through (without changing the configuration):
# Get the stdlib
$ agda-pkg -pagda/agda-stdlib -n
# The -p indicates a package and -n indicates to dry-run agda only,
# still this should download the stdlib from github.

The -p takes care of getting the package from the remote repository
and and pick the right include directives (-i<dir>).

# Example on how to build agda-libjs
$ agda-pkg -pcrypto-agda/agda-libjs -n
$ cd ~/.agda-pkg/github/crypto-agda/agda-libjs
$ agda-pkg -i. -pagda/agda-stdlib agda-libjs.agda

The -c indicates a configuration file which can
list all the dependencies.

# Configuration file: Example on how to build crypto-agda
$ agda-pkg -pcrypto-agda/crypto-agda -n
$ cd ~/.agda-pkg/github/crypto-agda/crypto-agda
$ cat agda-pkg.conf
$ agda-pkg -cagda-pkg.conf crypto-agda.agda
EOF
exit 0
}

set -e

# $XDG_DATA_HOME ?
AGDA_PKG_ROOT="$HOME/.agda-pkg"

AGDA_PKG_GITHUB_URL=https://github.com
AGDA_PKG_DARCSHUB_URL=http://hub.darcs.net
AGDA_PKG_BITBUCKET_URL=https://bitbucket.org

AGDA_PKG_BIN="${AGDA_PKG_BIN:-agda}"

# You can override those config variables through a simple script
# to be sourced.
for conf in "$HOME"/.agda-pkg/config \
            "$XDG_CONFIG_HOME"/agda-pkg/config \
            /etc/agda-pkg/config; do
  if [ -e "$conf" ]; then
    . "$conf"
    break
  fi
done

# TODO: Deal with customization specifically for those
AGDA_PKG_SUBDIRS=(lib src .)
AGDA_PKG_MAINFILES=(Everything README)

getpkg(){
  local pkg="$1"
  local dest="$2"
  mkdir -p "$(dirname "$dest")"
  case "$pkg" in
    (darcshub/*)
      pkg="${pkg#darcshub/}"
      darcs get "$AGDA_PKG_DARCSHUB_URL/$pkg" "$dest" ;;
    (bitbucket/*)
      pkg="${pkg#bitbucket/}"
      hg  clone "$AGDA_PKG_BITBUCKET_URL/$pkg" "$dest" ||
      git clone "$AGDA_PKG_BITBUCKET_URL/$pkg" "$dest" ;;
    (github/*)
      pkg="${pkg#github/}"
      git clone "$AGDA_PKG_GITHUB_URL/$pkg" "$dest" ;;
    (*)
      echo "Unsupported package name \`$pkg'" >>/dev/stderr
      exit 1 ;;
  esac
}

pkgdir(){
  local pkg="$1"
  local kont="$2"
  local fs=()
  case "$pkg" in
    (*/*/*) : ;;
    (*/*)
      # The default is github
      pkg=github/"$pkg"
      ;;
  esac
  local d="$AGDA_PKG_ROOT/$pkg"
  if [ ! -d "$d" ]; then
    getpkg "$pkg" "$d"
  fi
  for bpkg in "$(basename "$pkg")" "${AGDA_PKG_MAINFILES[@]}"; do
    local f="$d/$bpkg.agda"
    local fs=("${fs[@]}" "$f")
    if [ -e "$f" ]; then
      # TODO: read the subdir from special syntax in $f

      # Default heuristic
      for subdir in "${AGDA_PKG_SUBDIRS[@]}"; do
        if [ -e "$d/$subdir" ]; then
          "$kont" "$d/$subdir"
          return 0
        fi
      done
    fi
  done

  echo "Could not find the package \`$pkg'. None of the following files exist:" >>/dev/stderr
  for f in "${fs[@]}"; do
    echo "  $f" >>/dev/stderr
  done
  exit 1
}

packages(){
  _pkgs=("${_pkgs[@]}" "$@")
}

package(){
  # check arity
  packages "$1"
}

includedir(){
  for d; do
    if [ ! -d "$d" ]; then
      echo "includedir: No such file or directory \`$d'" >>/dev/stderr
      exit 1
    fi
  done
  _incl=("${_incl[@]}" "$@")
}

_args=("$AGDA_PKG_BIN")
_pkgs=()
_incl=()
_mode=run

loadconfig(){
  unset pkgs
  unset args
  unset incl
  . "$1"
  _pkgs=("${_pkgs[@]}" "${pkgs[@]}")
  _args=("${_args[@]}" "${args[@]}")
  includedir "${incl[@]}"
}

# Let's parse -p<pkg> and --pkg=<pkg> flags
for arg; do
  case "$arg" in
    (-c*)               loadconfig "${arg#-c}" ;;
    (--config=*)        loadconfig "${arg#--config=}" ;;
    (-p*)               package "${arg#-p}" ;;
    (--pkg=*)           package "${arg#--pkg=}" ;;
    (-i*)               includedir "${arg#-i}" ;;
    (--include-path=*)  includedir "${arg#--include-path=}" ;;
    (--include-dirs)    _mode=include-dirs ;;
    (-n|--dry-run)      _mode=dry ;;
    (-\?|-h|--help)     usage ;;
    (*)                 _args=("${_args[@]}" "$arg") ;;
  esac
done

# Debugging
#echo "args: ${_args[@]}" >>/dev/stderr
#echo "pkgs: ${_pkgs[@]}" >>/dev/stderr
#echo "incl: ${_incl[@]}" >>/dev/stderr

for pkg in "${_pkgs[@]}"; do
  pkgdir "$pkg" includedir
done

for dir in "${_incl[@]}"; do
  _args=("${_args[@]}" -i"$dir")
done

case "$_mode" in
  (dry)
    echo "${_args[@]}"
    echo 'dry run, nothing is run' >>/dev/stderr;;
  (run)
    echo "${_args[@]}" >>/dev/stderr
    exec "${_args[@]}";;
  (include-dirs)
    echo "${_incl[@]}";;
esac
